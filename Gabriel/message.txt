# Import necessary libraries for hyperparameter tuning and model training
from sklearn.model_selection import RandomizedSearchCV
from lightgbm import LGBMClassifier

# Instantiate a LightGBM Classifier with multiclass objective and a fixed random state for reproducibility
lg = LGBMClassifier(objective='multiclass', random_state=42)

# Define a dictionary containing the hyperparameters and their possible values for tuning
param_dist_lg = {
    'num_leaves': [31, 50, 100],
    'learning_rate': [0.01, 0.1, 0.2],
    'n_estimators': [50, 100, 200],
    'max_depth': [10, 20, 30]
}

# Instantiate a RandomizedSearchCV object for hyperparameter tuning using LightGBM model, 
# specifying the search space, scoring metric, number of iterations, cross-validation folds, 
# number of parallel jobs, and verbosity level
random_search_lg = RandomizedSearchCV(lg, param_distributions=param_dist_lg, scoring='f1_weighted', n_iter=10, cv=3, n_jobs=-1, verbose=2)

# Fit the RandomizedSearchCV object to the training data
random_search_lg.fit(X_train, y_train)

# Get the best estimator from the RandomizedSearchCV results
best_lg = random_search_lg.best_estimator_

# Predict the class labels using the best estimator on the test data
y_pred = best_lg.predict(X_test)

# Evaluate the performance of the best LightGBM model
y_pred_lg = best_lg.predict(X_test)
print(classification_report(y_test, y_pred_lg))
print("Accuracy of LightGBM: " + str(accuracy_score(y_test, y_pred_lg)))
print("Precision of LightGBM: " + str(precision_score(y_test, y_pred_lg, average='weighted')))
print("Recall of LightGBM: " + str(recall_score(y_test, y_pred_lg, average='weighted')))
print("Average F1 of LightGBM: " + str(f1_score(y_test, y_pred_lg, average='weighted')))
print("F1 of LightGBM for each type of attack: " + str(f1_score(y_test, y_pred_lg, average=None)))
lg_f1 = f1_score(y_test, y_pred_lg, average=None)

# Plot the confusion matrix to visualize the performance of the model
cm = confusion_matrix(y_test, y_pred_lg)
f, ax = plt.subplots(figsize=(5, 5))
sns.heatmap(cm, annot=True, linewidth=0.5, linecolor="red", fmt=".0f", ax=ax)
plt.xlabel("y_pred")
plt.ylabel("y_true")
plt.show()